<!-- Build Babel. It is also used by Hudson Babel project. JUnit test is available for this build. -->
<project basedir="." default="addon" name="BUILD_Babel">
	<description>
	    Build Babel. 
            Also used by Hudson Babel project. 
	    JUnit test is available for this build.
	    $Id: build_Babel.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="Babeldir" location="../Babel" />
	<property name="srcBabel" location="${Babeldir}/src" />
	<property name="buildBabel" location="${Babeldir}/build" />
	<property name="libBabel" location="${Babeldir}/lib" />
	<property name="release_dir" value="release" />
	<property name="distBabel" location="${buildBabel}/dist" />
	<property name="beast2path" location="../beast2" />
	<property name="libBeast2" location="${beast2path}/lib" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
	<property name="beastappclasspath" location="../BeastFX/build" />
    <property name="BEASTLabsclasspath" location="../BEASTLabs/build" />
	<property name="Add_on_dir" value="${release_dir}/add-on" />

    <import file="${beast2path}/build.xml" />

	<property name="main_class_BEAST" value="beast.app.BeastMCMC" />
	<property name="report" value="${buildBabel}/junitreport"/>

	<path id="classpath">
        <pathelement path="${buildBabel}"/>
		<fileset dir="${libBeast2}/junit" includes="junit-platform-console-standalone-1.8.2.jar"/>
		<fileset dir="${libBeast2}" includes="beagle.jar"/>
		<fileset dir="${libBabel}" includes="itextpdf-5.5.9.jar"/>
		<fileset dir="${libBeast2}" includes="antlr-runtime-4.10.1.jar"/>
		<fileset dir="${libBeast2}" includes="beagle.jar"/> 
		<fileset dir="${libBeast2}" includes="colt.jar"/> 
		<fileset dir="${libBeast2}" includes="jam.jar"/>
		<fileset dir="../BEASTLabs/lib" includes="nashorn-core-15.3.jar"/>
        <pathelement path="${beast2classpath}"/>
        <pathelement path="${beastappclasspath}"/>
        <pathelement path="${BEASTLabsclasspath}"/>
	</path>

	<!-- start -->
	<target name="initBabel">
		<echo message="${ant.project.name}: ${ant.file}" />
		
		<available file="${Babeldir}/version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
              ** Required file version.xml does not exist. **
            </fail>

        <!-- Read package name and version from xml file -->
            <xmlproperty file="${Babeldir}/version.xml" prefix="fromVersionFile" />
        <property name="Babelversion" value="${fromVersionFile.package(version)}" />
	</target>

	<target name="cleanBabel">
    	<delete dir="${buildBabel}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_Babel" depends="cleanBabel,compile-allBabel,junitBabel"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_Babel" depends="cleanBabel,compile-allBabel,junitBabel,dist_all_Babel"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the Babel.jar and beauti.jar -->
	<target name="build_jar_all_Babel_NoJUnitTest" depends="cleanBabel,compile-allBabel,dist_all_Babel"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allBabel" depends="initBabel,compile-all">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${buildBabel}" />

		<!-- Compile the java code from ${srcBabel} into ${buildBabel} /bin -->
		<javac srcdir="${srcBabel}" destdir="${buildBabel}" classpathref="classpath" 
		       fork="true"
 		       memoryinitialsize="256m"
		       memorymaximumsize="256m">
                        <include name="beast/**/**" />
			<include name="babel/**/**" />
			<!-- compile JUnit test classes -->
			<include name="test/babel/**" />
		</javac>
		<echo message="Successfully compiled." />
	</target>

	<!-- make the beast.jar and beauti.jar -->
	<target name="dist_all_Babel" depends="compile-allBabel" description="create Babel jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distBabel}" />

		<jar jarfile="${distBabel}/stree.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="babel.spanningtrees.Panel" />
			</manifest>
			<fileset dir="${buildBabel}">
				<include name="babel/spanningtrees/*.class" />
			</fileset>
            <zipgroupfileset dir="${libBeast2}" includes="itextpdf-5.5.9.jar" />
		</jar>
		<!-- Put everything in ${buildBabel} into the beast.jar file -->
		<jar jarfile="${distBabel}/Babel.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main_class_BEAST}" />
			</manifest>
			<fileset dir="${buildBabel}">
				<include name="babel/**/*.class" />
			</fileset>
			<fileset dir="${beast2classpath}">
				<include name="beast/**/*.class" />
				<include name="beast/**/*.properties" />
				<include name="**/*.png" />
				<include name="beagle/**/*.class" />
				<include name="org/**/*.class" />
			</fileset>
	        <fileset dir="${BEASTLabsclasspath}">
				<include name="**/*.class" />
			</fileset>
			<zipgroupfileset dir="${libBeast2}" includes="beagle.jar"/>
			<zipgroupfileset dir="${libBabel}" includes="itextpdf-5.5.9.jar"/>
			<zipgroupfileset dir="${libBeast2}" includes="antlr-runtime-4.7.jar"/>
			<zipgroupfileset dir="${libBeast2}" includes="beagle.jar"/> 
			<zipgroupfileset dir="${libBeast2}" includes="colt.jar"/> 
			<zipgroupfileset dir="${libBeast2}" includes="jam.jar"/>
		</jar>
		<jar jarfile="${distBabel}/Babel.src.jar">
			<fileset dir="${srcBabel}">
				<include name="**/*.java" />
				<include name="**/*.png" />
			</fileset>
        </jar>
		<jar jarfile="${distBabel}/Babel.addon.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildBabel}">
				<include name="**/*.class" />
				<include name="**/*.png" />
				<include name="**/*.properties" />
			</fileset>
			<fileset dir="${srcBabel}">
				<include name="**/*.png" />
			</fileset>
		</jar>
	</target>


	<target name="DolloAnnotator" depends="compile-allBabel" description="create DolloAnnotator.jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distBabel}" />

		<!-- Put everything in ${buildBabel} into the beast.jar file -->
		<jar jarfile="${distBabel}/DolloAnnotator.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="babel.tools.DolloAnnotator" />
			</manifest>
			<fileset dir="${buildBabel}">
				<include name="babel/**/*.class" />
			</fileset>
			<fileset dir="${beast2classpath}">
				<include name="beast/**/*.class" />
				<include name="beast/**/*.properties" />
				<include name="**/*.png" />
				<include name="beagle/**/*.class" />
				<include name="org/**/*.class" />
			</fileset>
	        <fileset dir="${BEASTLabsclasspath}">
				<include name="**/*.class" />
			</fileset>
			<zipgroupfileset dir="${libBeast2}" includes="beagle.jar"/>
			<zipgroupfileset dir="${libBabel}" includes="itextpdf-5.5.9.jar"/>
			<zipgroupfileset dir="${libBeast2}" includes="antlr-runtime-4.7.jar"/>
			<zipgroupfileset dir="${libBeast2}" includes="beagle.jar"/> 
			<zipgroupfileset dir="${libBeast2}" includes="colt.jar"/> 
			<zipgroupfileset dir="${libBeast2}" includes="jam.jar"/>
		</jar>
	</target>
	
	<!-- run beast.jar -->
	<target name="run_Babel">
		<java jar="${distBabel}/Babel.jar" fork="true" />
	</target>

	
	<!-- JUnit test -->
	<target name="junitBabel">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildBabel}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${srcBabel}">
                    <include name="test/**/*Test.java"/>                                         
				</fileset>
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>                                         
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>                                         
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>
    
    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml"/>
			<report format="frames" todir="${report}"/>
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>


	<target name="addon"
	        depends="build_jar_all_Babel_NoJUnitTest"
	        description="release BEAST 2 add-on version of Babel">

		<delete dir="${Add_on_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${Add_on_dir}" />
		<mkdir dir="${Add_on_dir}/lib" />
		<mkdir dir="${Add_on_dir}/examples" />
		<mkdir dir="${Add_on_dir}/fxtemplates" />

		<copy todir="${Add_on_dir}">
			<fileset file="version.xml"/>
		</copy>
		<copy todir="${Add_on_dir}/examples">
			<fileset dir="examples" />
		</copy>
		<copy todir="${Add_on_dir}/fxtemplates">
			<fileset dir="fxtemplates" />
		</copy>
		<copy todir="${Add_on_dir}/lib">
			<fileset dir="${distBabel}" includes="Babel.addon.jar" />
		</copy>
		<copy todir="${Add_on_dir}/lib">
			<fileset dir="${libBabel}" includes="itextpdf-5.5.9.jar" />
		</copy>
		<copy todir="${Add_on_dir}">
			<fileset dir="${distBabel}" includes="Babel.src.jar" />
		</copy>
		<copy todir="${Add_on_dir}/fxtemplates">
			<fileset dir="fxtemplates">
				<include name="*.xml"/>
			</fileset>
		</copy>

		<jar jarfile="${distBabel}/Babel.addon.v${Babelversion}.zip">
			<fileset dir="${Add_on_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Add-on version v${Babelversion} release is finished." />
	</target>

</project>
