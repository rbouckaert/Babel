<beast version='2.0'
       namespace='beast.app.beauti:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.base.evolution.tree.coalescent:beast.base.util:beast.base.math:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.math.distributions:beastfx.app.inputeditor:beastfx.app.beauti'
	templateinfo='Binary covarion model for binary data&lt;br>useful for linguistic analysis'>

<map name='connect'>beastfx.app.inputeditor.BeautiConnector</map>
<map name='subtemplate'>beastfx.app.inputeditor.BeautiSubTemplate</map>
<map name='prior'>beast.base.inference.distribution.Prior</map>

    <beauticonfig spec='BeautiConfig'
        inputLabelMap='beast.base.inference.MCMC.operator=Operators,
	        beast.base.inference.MCMC.logger=Loggers'
        inlinePlugins ='beast.base.inference.MCMC.distribution,
            beast.base.evolution.sitemodel.SiteModel.substModel,
            beast.base.evolution.tree.coalescent.ExponentialGrowth,
            beast.base.evolution.tree.coalescent.ConstantPopulation,
            beast.base.evolution.tree.coalescent.Coalescent,
            beast.base.inference.State.stateNode'
        collapsedPlugins ='beast.base.inference.MCMC.logger'
        suppressPlugins = 'beast.base.evolution.substitutionmodel.MutationDeathModel.substmodel,
			beast.base.evolution.substitutionmodel.MutationDeathModel.frequencies,
			beast.base.evolution.substitutionmodel.BinaryCovarion.rates,
			beast.base.evolution.substitutionmodel.BinaryCovarion.eigenSystem,
			beast.base.evolution.substitutionmodel.BinaryCovarion.frequencies,
			beast.base.inference.MCMC.operator,
    		beast.base.inference.MCMC.operatorschedule,
	        beast.base.evolution.tree.coalescent.Coalescent.treeIntervals,
	        beast.base.evolution.tree.coalescent.Coalescent.tree,
	        beast.base.inference.MCMC.state,
	        beast.base.inference.MCMC.distribution,
	        beast.base.inference.MCMC.init,
	        beast.base.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
	        beast.base.evolution.speciation.BirthDeathGernhard08Model.tree,
	        beast.base.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
			beast.base.evolution.speciation.YuleModel.treeIntervals,
			beast.base.evolution.speciation.YuleModel.useTipDates,
			beast.base.evolution.speciation.YuleModel.tree,
	        beast.base.evolution.tree.Tree,
	        beast.base.evolution.tree.Tree.trait,
	        beast.base.evolution.tree.Tree.taxa,
	        beast.base.evolution.tree.Tree.taxonset,
	        beast.base.evolution.tree.coalescent.RandomTree.trait,
	        beast.base.evolution.tree.coalescent.RandomTree.initial,
	        beast.base.evolution.tree.coalescent.RandomTree.taxa,
	        beast.base.evolution.tree.coalescent.RandomTree.taxonset,
	        beast.base.evolution.tree.coalescent.RandomTree.estimate,
	        beast.base.evolution.tree.TreeParser.initial,
	        beast.base.evolution.tree.TreeParser.taxa,
	        beast.base.evolution.tree.TreeParser.taxonset,
	        beast.base.evolution.tree.TreeParser.trait,
	        beast.base.evolution.tree.TreeParser.estimate,
	        beast.base.evolution.tree.ClusterTree.initial,
	        beast.base.evolution.tree.ClusterTree.taxa,
	        beast.base.evolution.tree.ClusterTree.taxonset,
	        beast.base.evolution.tree.ClusterTree.trait,
	        beast.base.evolution.tree.ClusterTree.estimate,
	        beast.base.evolution.substitutionmodel.WAG.rates,
	        beast.base.evolution.substitutionmodel.WAG.frequencies,
	        beast.base.evolution.substitutionmodel.JTT.rates,
	        beast.base.evolution.substitutionmodel.JTT.frequencies,
	        beast.base.evolution.substitutionmodel.Blosum62.rates,
	        beast.base.evolution.substitutionmodel.Blosum62.frequencies,
	        beast.base.evolution.substitutionmodel.Dayhoff.rates,
	        beast.base.evolution.substitutionmodel.Dayhoff.frequencies,
	        beast.base.evolution.substitutionmodel.CPREV.rates,
	        beast.base.evolution.substitutionmodel.CPREV.frequencies,
	        beast.base.evolution.substitutionmodel.MTREV.rates,
	        beast.base.evolution.substitutionmodel.MTREV.frequencies,
	        beast.base.evolution.substitutionmodel.GTR.rates,
	        beast.base.evolution.substitutionmodel.JukesCantor.frequencies,
            beast.base.inference.distribution.Prior.x,
            beast.base.evolution.tree.MRCAPrior.tree,
            beast.base.evolution.tree.MRCAPrior.monophyletic,
            beast.base.evolution.tree.MRCAPrior.taxonset,
            beast.base.evolution.branchratemodel.UCRelaxedClockModel.tree,
            beast.base.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
			beast.base.evolution.branchratemodel.UCRelaxedClockModel.distr,
            beast.base.evolution.branchratemodel.RandomLocalClockModel.tree,
            beast.base.evolution.branchratemodel.RandomLocalClockModel.meanRate,
            beast.base.evolution.branchratemodel.RandomLocalClockModel.indicators,
            beast.base.evolution.operator.ScaleOperator.indicator,
	        beast.base.inference.Operator.weight,
            beast.base.inference.Logger.model,
            beast.base.evolution.tree.coalescent.BayesianSkyline.treeIntervals,
            beast.base.evolution.tree.coalescent.BayesianSkyline.groupSizes,
            beast.base.evolution.tree.coalescent.BayesianSkyline.popSizes,
            beast.evolution.substitutionmodel.BirthDeathCovarion2.rates,
            beast.evolution.substitutionmodel.BirthDeathCovarion2.eigenSystem,
            beast.evolution.substitutionmodel.BirthDeathCovarion2.frequencies
            '
        buttonLabelMap='beast.app.beauti.BeautiInitDlg.&gt;&gt; details=Edit parameters'
    >
        <!--disableMenus='Mode'-->

        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png.x' forceExpansion='FALSE'
            type='beast.base.evolution.alignment.Alignment'
        />
		<mergepoint id='aux-partitions-panels'/>

		<panel spec='BeautiPanelConfig' panelname="Tip Dates" tiptext="Allows to specify data that a taxon was sampled"
            path='tree'
            hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
            isVisible='true'
        />
		<mergepoint id='aux-tipdates-panels'/>

		<panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png.x' forceExpansion='TRUE'
        />
		<mergepoint id='aux-sitemodel-panels'/>

		<panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png.x' forceExpansion='TRUE'
        />
		<mergepoint id='aux-clockmodel-panels'/>
		<panel spec='BeautiPanelConfig' panelname="Initialization" tiptext="Initial state"
            path='state/stateNode'
            hasPartitions="none" icon='6.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<mergepoint id='aux-initilisation-panels'/>

		<panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png.x' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.base.inference.Distribution'
        />
		<mergepoint id='aux-priors-panels'/>

		<panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<mergepoint id='aux-operators-panels'/>

		<panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png.x' forceExpansion='TRUE'
        />
		<mergepoint id='aux-panels'/>

		<alignmentProvider id="Add Alignment" spec='BeautiAlignmentProvider' template='@PartitionTemplate'/>

        <partitiontemplate id='PartitionTemplate' spec='BeautiSubTemplate' class='beast.base.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[



			<distribution spec='TreeLikelihood' id="treeLikelihood.$(n)" useAmbiguities="true">
			    <data spec='beast.base.evolution.alignment.FilteredAlignment' filter='-' id='orgdata.$(n)' strip='false' ascertained='true' excludefrom='0' excludeto='1'>
					<userDataType id="bdDataType" spec='beast.base.evolution.datatype.UserDataType'
                		states='5'
                		codelength='1'
		                codeMap='
        		        A = 0,
                		1 = 1 4,
		                B = 1,
        		        0 = 0 2 3 ,
                		? = 0 1 2 3 4,
		                - = 0 1 2 3 4,
        		        C = 2,
                		D = 3,
        		        E = 4'/> 
                    <data idref="data"/>
			    </data>
				<tree idref="Tree.t:tree"/>
				<siteModel spec='beast.base.evolution.sitemodel.SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount="1">
		            <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
		            <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0'        estimate='true'/>
		            <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0'         estimate='false'/>
<substModel id="PDCovarion" spec="babel.evolution.substitutionmodel.BirthDeathCovarion2">
        <hfrequencies id="hfrequencies" spec="parameter.RealParameter" dimension="2" lower="0.0" upper="1.0" estimate="false">0.5 0.5</hfrequencies>
        <vfrequencies id="frequencies" spec="parameter.RealParameter" dimension="3" lower="0.0" upper="1.0">0.95 0.05 0.0</vfrequencies>
        <originLength id="PDCOriginLength" spec='parameter.RealParameter' value='0.1'/>
        <switchRate id='PDCSwitchRate' spec='parameter.RealParameter' upper="1.0" value='0.1 0.1' estimate="false"/>
        <deathprob id='PDCCognateDeathRate' spec='parameter.RealParameter' upper="1000" lower="1e-5" value='1.0 0.1'/>
</substModel>
				</siteModel>
                <branchRateModel spec='StrictClockModel' id='StrictClock.c:clock'>
                    <clock.rate id='clockRate.c:clock' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </distribution>

	        <prior id='ClockPrior.c:clock' x='@clockRate.c:clock'><distr spec="beast.base.inference.distribution.Uniform" upper='Infinity'/></prior>
	        <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'><distr spec="OneOnX"/></prior>

            <!-- tree and its properties -->
            <taxonset id='TaxonSet.$(n)' spec='beast.base.evolution.alignment.TaxonSet' alignment='@$(n)' />
            <plugin spec='beast.base.evolution.tree.Tree' id='Tree.t:tree' taxonset='@TaxonSet.$(n)'>
	            <!--trait id='datetrait.$(n)' spec='beast.base.evolution.tree.TraitSet' traitname='date' units='year'
		            value=''>
		            <taxa idref='data'/>
	            </trait-->
            </plugin>

            <!--plugin spec='beast.base.evolution.tree.coalescent.RandomTree' id='RandomTree.t:tree' estimate='false' trait='@datetrait.$(n)' initial='@Tree.t:tree'-->
            <plugin spec='beastlabs.evolution.tree.SimpleRandomTree' id='RandomTree.t:tree' estimate='false' initial='@Tree.t:tree'>
                <taxa spec='Alignment' idref='$(n)'/>
                <!--
                <populationModel id='ConstantPopulation0.t:tree' spec='ConstantPopulation'>
            		<popSize id='randomPopSize.t:tree' spec='parameter.RealParameter' value='1'/>
	            </populationModel>
	            -->
            </plugin>

            <!-- default tree prior -->
            <plugin spec='YuleModel' id="YuleModel.t:tree" tree='@Tree.t:tree'>
                <parameter name='birthDiffRate' id="birthRate.t:tree" value='1.0' estimate='true'/>
            </plugin>

            <plugin id='TreeHeight.t:tree' spec='beast.base.evolution.tree.TreeStatLogger' tree='@Tree.t:tree'/>

            <logger id='treelog.t:tree' spec='beast.base.inference.Logger' logEvery="1000" fileName="$(n).trees" mode='tree'>
	            <log id='TreeWithMetaDataLogger.t:tree' spec='beast.base.evolution.TreeWithMetaDataLogger' tree='@Tree.t:tree'>
	            </log>
            </logger>

            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>
            <operator id='allTipDatesRandomWalker.t:tree' spec='TipDatesRandomWalker' windowSize="1" weight="0" tree="@Tree.t:tree"/>

            <operator id='YuleModelTreeScaler.t:tree' spec='ScaleOperator' scaleFactor="0.5" weight="3" tree="@Tree.t:tree"/>
            <operator id='YuleModelTreeRootScaler.t:tree' spec='ScaleOperator' scaleFactor="0.5" weight="3" tree="@Tree.t:tree" rootOnly='true'/>
            <operator id='YuleModelUniformOperator.t:tree' spec='Uniform' weight="30" tree="@Tree.t:tree"/>
            <operator id='YuleModelSubtreeSlide.t:tree' spec='SubtreeSlide' weight="15" gaussian="true" size="1.0" tree="@Tree.t:tree"/>
            <operator id='YuleModelNarrow.t:tree' spec='Exchange' isNarrow='true' weight="15" tree="@Tree.t:tree"/>
            <operator id='YuleModelWide.t:tree' spec='Exchange' isNarrow='false' weight="3" tree="@Tree.t:tree"/>
            <operator id='YuleModelWilsonBalding.t:tree' spec='WilsonBalding' weight="3" tree="@Tree.t:tree"/>

			<operator id='PDCOriginLengthScaler' spec='ScaleOperator' scaleFactor="0.75" weight="0.1" parameter="@PDCOriginLength"/>
<!--
			<operator id='PDCAlphaScaler' spec='ScaleOperator' scaleFactor="0.75" weight="0.1" parameter="@PDCAlpha"/>
-->			
			<operator id='PDCSwitchRateScaler' spec='ScaleOperator' scaleFactor="0.75" weight="0.1" parameter="@PDCSwitchRate"/>
			<operator id='PDCCognateDeathRateScaler' spec='ScaleOperator' scaleFactor="0.75" weight="0.1" parameter="@PDCCognateDeathRate"/>
			

            <prior id="PDCSwitchRatePrior" name="distribution" x="@PDCSwitchRate">
                <distr spec="beast.base.inference.distribution.Gamma">
                    <parameter lower="0.0" name="alpha" upper="0.0">0.05</parameter>
                    <parameter lower="0.0" name="beta" upper="0.0">10.0</parameter>
                </distr>
            </prior>

            <prior id="PDCOriginLengthPrior" name="distribution" x="@PDCOriginLength">
                <distr spec="beast.base.inference.distribution.Uniform" lower="0.0" upper="10000"/>
            </prior>
            
<!--
            <prior id="PDCAlphaPrior" name="distribution" x="@PDCAlpha">
                <distr spec="beast.base.inference.distribution.Uniform" lower="0.0" upper="1"/>
            </prior>
-->
         
            <prior id="PDCCognateDeathRatePrior" name="distribution" x="@PDCCognateDeathRate">
                <distr spec="beast.base.inference.distribution.Exponential" mean="1.0"/>
            </prior>


            <prior id='YuleBirthRatePrior.t:tree' x='@birthRate.t:tree'><distr spec="beast.base.inference.distribution.Uniform" lower='0' upper='Infinity'/></prior>
            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'><distr spec="beast.base.inference.distribution.Exponential" mean='1'/></prior>
            <prior id='PropInvariantPrior.t:tree' x='@proportionInvariant.s:$(n)'><distr spec="beast.base.inference.distribution.Uniform" lower='0' upper='1'/></prior>

  		    <operator id='YuleBirthRateScaler.t:tree' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@birthRate.t:tree"/>
			<operator id='StrictClockRateScaler.c:clock' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.c:clock'/>
			<!-- need updown operator for clockRate?!? Also in SubstModel.xml -->
			<upDownOperator id='strictClockUpDownOperator.c:$(n)' spec='UpDownOperator' scaleFactor="0.75" weight="3">
				<up idref="clockRate.c:clock"/>
				<down idref="Tree.t:tree"/>
			</upDownOperator>


]]>
            <connect srcID='treeLikelihood.$(n)'            targetID='likelihood' inputName='distribution' if="isInitializing"/>
            <connect srcID='YuleModel.t:tree'               targetID='prior' inputName='distribution' if="isInitializing"/>
            <connect method="beastfx.app.inputeditor.SiteModelInputEditor.customConnector"/>

            <connect srcID='treelog.t:tree'                 targetID='mcmc' inputName='logger' if='inposterior(Tree.t:tree) and Tree.t:tree/estimate=true'/>
            <connect srcID='RandomTree.t:tree'                targetID='mcmc' inputName='init'   if='inposterior(Tree.t:tree)'/>

            <connect srcID='ClockPrior.c:clock'               targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'/>
            <connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <!--connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/-->

            <connect srcID='Tree.t:tree'                      targetID='state' inputName='stateNode' if='inposterior(Tree.t:tree)'/>
            <connect srcID='proportionInvariant.s:$(n)'       targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='PDCOriginLength'                  targetID='state' inputName='stateNode' if='inlikelihood(PDCOriginLength) and PDCOriginLength/estimate=true'/>
            <connect srcID='PDCSwitchRate'                    targetID='state' inputName='stateNode' if='inlikelihood(PDCSwitchRate) and PDCSwitchRate/estimate=true'/>
<!--
            <connect srcID='PDCAlpha'                          targetID='state' inputName='stateNode' if='inlikelihood(PDCAlpha) and PDCAlpha/estimate=true'/>
-->            
            <connect srcID='PDCCognateDeathRate'              targetID='state' inputName='stateNode' if='inlikelihood(PDCCognateDeathRate) and PDCCognateDeathRate/estimate=true'/>

            <connect srcID='frequencies.s:$(n)'               targetID='state' inputName='stateNode' if='inlikelihood(frequencies.s:$(n)) and frequencies.s:$(n)/estimate=true'/>
            <connect srcID='hiddenfrequencies.s:$(n)'         targetID='state' inputName='stateNode' if='inlikelihood(hiddenfrequencies.s:$(n)) and hiddenfrequencies.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:clock'                targetID='state' inputName='stateNode' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'/>
            <connect srcID='birthRate.t:tree'                 targetID='state' inputName='stateNode' if='inposterior(YuleModel.t:tree) and inposterior(Tree.t:tree) and birthRate.t:tree/estimate=true'/>



            <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
            <!--connect srcID='mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect-->
            <connect srcID='mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='PDCOriginLengthScaler'            targetID='mcmc' inputName='operator' if='inlikelihood(PDCOriginLength) and PDCOriginLength/estimate=true'>Scales origin length rate of partition s:$(n)</connect>
<!--
            <connect srcID='PDCAlphaScaler'                   targetID='mcmc' inputName='operator' if='inlikelihood(PDCAlpha) and PDCAlpha/estimate=true'>Scales alpha rate of partition s:$(n)</connect>
-->            
            <connect srcID='PDCSwitchRateScaler'              targetID='mcmc' inputName='operator' if='inlikelihood(PDCSwitchRate) and PDCSwitchRate/estimate=true'>Scales switch rate of partition s:$(n)</connect>
            <connect srcID='PDCCognateDeathRateScaler'        targetID='mcmc' inputName='operator' if='inlikelihood(PDCCognateDeathRate) and PDCCognateDeathRate/estimate=true'>Scales birth and death rate of partition s:$(n)</connect>
            
            <connect srcID='gammaShapeScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='StrictClockRateScaler.c:$(n)'     targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'>Scale clock rate of partition c:$(n)</connect>
            <connect srcID='YuleBirthRateScaler.t:tree'       targetID='mcmc' inputName='operator' if='inposterior(birthRate.t:tree) and birthRate.t:tree/estimate=true'>Scales birth rate of Yule prior for partition t:tree</connect>

            <connect srcID='frequenciesDelta.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(frequencies.s:$(n)) and frequencies.s:$(n)/estimate=true'>Estimates frequencies for binary covarion model</connect>
            <connect srcID='hFrequenciesDelta.s:$(n)'         targetID='mcmc' inputName='operator' if='inlikelihood(hiddenfrequencies.s:$(n)) and hiddenfrequencies.s:$(n)/estimate=true'>Estimates hidden frequencies for binary covarion model</connect>

            <connect if="inposterior(YuleModel.t:tree) and Tree.t:tree/estimate=true" inputName="operator" srcID="YuleModelTreeScaler.t:tree" targetID="mcmc">Scales all internal nodes for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:tree) and Tree.t:tree/estimate=true" inputName="operator" srcID="YuleModelTreeRootScaler.t:tree" targetID="mcmc">Scales root node for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:tree) and Tree.t:tree/estimate=true" inputName="operator" srcID="YuleModelUniformOperator.t:tree" targetID="mcmc">Draws new internal node heights uniformally for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:tree) and Tree.t:tree/estimate=true" inputName="operator" srcID="YuleModelSubtreeSlide.t:tree" targetID="mcmc">Performs subtree slide rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:tree) and Tree.t:tree/estimate=true" inputName="operator" srcID="YuleModelNarrow.t:tree" targetID="mcmc">Narrow exchange performs local rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:tree) and Tree.t:tree/estimate=true" inputName="operator" srcID="YuleModelWide.t:tree" targetID="mcmc">Wide exchange performs global rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:tree) and Tree.t:tree/estimate=true" inputName="operator" srcID="YuleModelWilsonBalding.t:tree" targetID="mcmc">Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>
            <!--connect srcID='strictClockUpDownOperator.c:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:clock) and inlikelihood(Tree.t:tree) and Tree.t:tree/estimate=true and clockRate.c:clock/estimate=true'>Scale up substitution rate c:$(n) and scale down tree t:($n) </connect-->
            <connect srcID='strictClockUpDownOperator.c:clock' targetID='mcmc' inputName='operator'
                     if='nooperator(FixMeanRatesOperator) and inlikelihood(clockRate.c:clock) and inlikelihood(Tree.t:tree) and Tree.t:tree/estimate=true and clockRate.c:clock/estimate=true'>
                Scale up substitution rate c:$(n) and scale down tree t:($n)
            </connect>




            <connect srcID='treeLikelihood.$(n)'              targetID='tracelog' inputName='log'/>
            <connect srcID='TreeHeight.t:tree'                targetID='tracelog' inputName='log' if='inposterior(Tree.t:tree)'/>
            <connect srcID='proportionInvariant.s:$(n)'       targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
<!--
            <connect srcID='PDCAlpha'                         targetID='tracelog' inputName='log' if='inlikelihood(PDCAlpha) and PDCAlpha/estimate=true'/>
-->            
            <connect srcID='PDCOriginLength'                  targetID='tracelog' inputName='log' if='inlikelihood(PDCOriginLength) and PDCOriginLength/estimate=true'/>
            <connect srcID='PDCCognateDeathRate'              targetID='tracelog' inputName='log' if='inlikelihood(PDCCognateDeathRate) and PDCCognateDeathRate/estimate=true'/>
            <connect srcID='PDCSwitchRate'                    targetID='tracelog' inputName='log' if='inlikelihood(PDCSwitchRate) and PDCSwitchRate/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:clock'                targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'/>
            <connect srcID='YuleModel.t:tree'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:tree) and inposterior(Tree.t:tree) and Tree.t:tree/estimate=true'/>
            <connect srcID='birthRate.t:tree'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:tree) and birthRate.t:tree/estimate=true'/>
            <connect srcID='frequencies.s:$(n)'               targetID='tracelog' inputName='log' if='inlikelihood(frequencies.s:$(n)) and frequencies.s:$(n)/estimate=true'/>
            <connect srcID='hiddenfrequencies.s:$(n)'         targetID='tracelog' inputName='log' if='inlikelihood(hiddenfrequencies.s:$(n)) and hiddenfrequencies.s:$(n)/estimate=true'/>

            <connect srcID='GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
<!--
            <connect srcID='PDCAlphaPrior'                    targetID='prior' inputName='distribution' if='inlikelihood(PDCAlpha) and PDCAlpha/estimate=true'/>
-->            
            <connect srcID='PDCSwitchRatePrior'               targetID='prior' inputName='distribution' if='inlikelihood(PDCSwitchRate) and PDCSwitchRate/estimate=true'/>
            <connect srcID='PDCOriginLengthPrior'             targetID='prior' inputName='distribution' if='inlikelihood(PDCOriginLength) and PDCOriginLength/estimate=true'/>
            <connect srcID='PDCCognateDeathRatePrior'         targetID='prior' inputName='distribution' if='inlikelihood(PDCCognateDeathRate) and PDCCognateDeathRate/estimate=true'/>
            
            <connect srcID='PropInvariantPrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='YuleBirthRatePrior.t:tree'        targetID='prior' inputName='distribution' if='inposterior(YuleModel.t:tree) and inposterior(Tree.t:tree) and birthRate.t:tree/estimate=true'/>

			<mergepoint id='aux-partitiontemplate'/>
        </partitiontemplate>

		<mergepoint id='clockModelTemplates'/>
		<mergepoint id='treePriorTemplates'/>
        <mergepoint id='parametricDistributions'/>


<!-- Tree initialisation -->
<!-- Random tree -->
		
        <subtemplate id='RandomTree' class='beastlabs.evolution.tree.SimpleRandomTree' mainid='RandomTree.t:tree'>
<![CDATA[
            <tree spec='beastlabs.evolution.tree.SimpleRandomTree' id='RandomTree.t:tree' estimate='false' trait='@datetrait.$(n)'>
                <taxa spec='Alignment' idref='data'/>
                <!--
                <populationModel id='ConstantPopulation0.t:tree' spec='ConstantPopulation'>
            		<popSize id='randomPopSize.t:tree' spec='parameter.RealParameter' value='1'/>
	            </populationModel>
	            -->
            </tree>
]]>
        </subtemplate>

<!-- Cluster tree (for UPGMA) -->

        <subtemplate id='UPGMATree' class='beast.base.evolution.tree.ClusterTree' mainid='UPGMATree.t:tree'>
<![CDATA[
        <tree spec='beast.base.evolution.tree.ClusterTree' id='UPGMATree.t:tree' clusterType='upgma' estimate='false'  trait='@datetrait.$(n)' taxa='@$(n)'/>
]]>
        </subtemplate>

<!-- Newick tree -->
        <subtemplate id='NewickTree' class='beast.base.evolution.tree.ClusterTree' mainid='NewickTree.t:tree'>
<![CDATA[
        <tree spec='beast.base.evolution.tree.TreeParser' id='NewickTree.t:tree' estimate='false'  trait='@datetrait.$(n)'  taxa='@$(n)' newick=""/>
]]>
        </subtemplate>

    </beauticonfig>


        <mergepoint id='misc'/>


   

<!-- framework for main model -->

    <run spec="MCMC" id="mcmc" chainLength="10000000">

        <state storeEvery='5000' id='state'>
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior">
				<mergepoint id='aux-priors'/>
            </distribution>
            <distribution spec="CompoundDistribution" id="likelihood" useThreads="true">
				<mergepoint id='aux-likelihoods'/>
            </distribution>
        </distribution>

        <logger id='tracelog' logEvery="1000" fileName="beast.log" sort="smart">
	        <model idref='posterior'/>
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

        <logger id='screenlog' logEvery="1000">
	        <!--model idref='posterior'/-->
            <log idref="posterior"/>
      	    <ESS spec='beast.base.inference.util.ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>

